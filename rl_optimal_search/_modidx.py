# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/rl_optimal_search/',
                'doc_host': 'https://gorkamunoz.github.io',
                'git_url': 'https://github.com/gorkamunoz/rl_optimal_search/tree/master/',
                'lib_path': 'rl_optimal_search'},
  'syms': { 'rl_optimal_search.LW_walker': {},
            'rl_optimal_search.None': {},
            'rl_optimal_search.cluster_launch': {},
            'rl_optimal_search.diffusion_walks': { 'rl_optimal_search.diffusion_walks.Biexp': ( 'diffusion_walks.html#biexp',
                                                                                                'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.Biexp.__init__': ( 'diffusion_walks.html#biexp.__init__',
                                                                                                         'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.Biexp.cdf': ( 'diffusion_walks.html#biexp.cdf',
                                                                                                    'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.Biexp.dpdf': ( 'diffusion_walks.html#biexp.dpdf',
                                                                                                     'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.Biexp.pdf': ( 'diffusion_walks.html#biexp.pdf',
                                                                                                    'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.Biexp.sample': ( 'diffusion_walks.html#biexp.sample',
                                                                                                       'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.biexp_time_generator': ( 'diffusion_walks.html#biexp_time_generator',
                                                                                                               'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.constant_velocity_generator': ( 'diffusion_walks.html#constant_velocity_generator',
                                                                                                                      'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.constant_velocity_generator_2D': ( 'diffusion_walks.html#constant_velocity_generator_2d',
                                                                                                                         'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.discrete_multiexp_step': ( 'diffusion_walks.html#discrete_multiexp_step',
                                                                                                                 'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.exp_generator': ( 'diffusion_walks.html#exp_generator',
                                                                                                        'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.exp_time_generator': ( 'diffusion_walks.html#exp_time_generator',
                                                                                                             'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.lw_step': ( 'diffusion_walks.html#lw_step',
                                                                                                  'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.lw_trajs': ( 'diffusion_walks.html#lw_trajs',
                                                                                                   'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.mfpt_informed_rw': ( 'diffusion_walks.html#mfpt_informed_rw',
                                                                                                           'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.mfpt_informed_rw_2D': ( 'diffusion_walks.html#mfpt_informed_rw_2d',
                                                                                                              'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.mfpt_rw': ( 'diffusion_walks.html#mfpt_rw',
                                                                                                  'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.mfpt_rw_2D': ( 'diffusion_walks.html#mfpt_rw_2d',
                                                                                                     'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.multiexp_dist': ( 'diffusion_walks.html#multiexp_dist',
                                                                                                        'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.powerlaw_generator': ( 'diffusion_walks.html#powerlaw_generator',
                                                                                                             'rl_optimal_search/diffusion_walks.py'),
                                                   'rl_optimal_search.diffusion_walks.rw_generator': ( 'diffusion_walks.html#rw_generator',
                                                                                                       'rl_optimal_search/diffusion_walks.py')},
            'rl_optimal_search.environment': { 'rl_optimal_search.environment.get_distance': ( 'environment.html#get_distance',
                                                                                               'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.get_encounters': ( 'environment.html#get_encounters',
                                                                                                 'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.isBetween': ( 'environment.html#isbetween',
                                                                                            'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.isBetween_ab_Vec': ( 'environment.html#isbetween_ab_vec',
                                                                                                   'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.isBetween_c_Vec': ( 'environment.html#isbetween_c_vec',
                                                                                                  'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.is_c_between_ab': ( 'environment.html#is_c_between_ab',
                                                                                                  'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.target_env': ( 'environment.html#target_env',
                                                                                             'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.target_env.__init__': ( 'environment.html#target_env.__init__',
                                                                                                      'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.target_env.check_bc': ( 'environment.html#target_env.check_bc',
                                                                                                      'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.target_env.check_encounter': ( 'environment.html#target_env.check_encounter',
                                                                                                             'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.target_env.init_env': ( 'environment.html#target_env.init_env',
                                                                                                      'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.target_env.step': ( 'environment.html#target_env.step',
                                                                                                  'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.target_search': ( 'environment.html#target_search',
                                                                                                'rl_optimal_search/environment.py'),
                                               'rl_optimal_search.environment.target_search_onhit': ( 'environment.html#target_search_onhit',
                                                                                                      'rl_optimal_search/environment.py')},
            'rl_optimal_search.single_LW_walker': {},
            'rl_optimal_search.single_RL_walker': {},
            'rl_optimal_search.theoretical_policy': { 'rl_optimal_search.theoretical_policy.get_ps': ( 'theoretical_policy.html#get_ps',
                                                                                                       'rl_optimal_search/theoretical_policy.py'),
                                                      'rl_optimal_search.theoretical_policy.prob_L': ( 'theoretical_policy.html#prob_l',
                                                                                                       'rl_optimal_search/theoretical_policy.py')},
            'rl_optimal_search.theory': { 'rl_optimal_search.theory.discrete_composite_sample': ( 'theoretical_policy.html#discrete_composite_sample',
                                                                                                  'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.discrete_pw_sample': ( 'theoretical_policy.html#discrete_pw_sample',
                                                                                           'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.get_ps': ( 'theoretical_policy.html#get_ps',
                                                                               'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.get_ps_composite': ( 'theoretical_policy.html#get_ps_composite',
                                                                                         'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.prob_L': ( 'theoretical_policy.html#prob_l',
                                                                               'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.prob_L_composite': ( 'theoretical_policy.html#prob_l_composite',
                                                                                         'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.ps_exp_cutoff': ( 'theoretical_policy.html#ps_exp_cutoff',
                                                                                      'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.pw_exp': ( 'theoretical_policy.html#pw_exp',
                                                                               'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.simul_2actions': ( 'theoretical_policy.html#simul_2actions',
                                                                                       'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.simul_2actions.__init__': ( 'theoretical_policy.html#simul_2actions.__init__',
                                                                                                'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.simul_2actions.reset': ( 'theoretical_policy.html#simul_2actions.reset',
                                                                                             'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.simul_2actions.reward': ( 'theoretical_policy.html#simul_2actions.reward',
                                                                                              'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.simul_ps': ( 'theoretical_policy.html#simul_ps',
                                                                                 'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.simul_ps.__init__': ( 'theoretical_policy.html#simul_ps.__init__',
                                                                                          'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.simul_ps.reward': ( 'theoretical_policy.html#simul_ps.reward',
                                                                                        'rl_optimal_search/theory.py'),
                                          'rl_optimal_search.theory.walk_from_policy': ( 'theoretical_policy.html#walk_from_policy',
                                                                                         'rl_optimal_search/theory.py')},
            'rl_optimal_search.utils': {'rl_optimal_search.utils.add_colorbar': ('utils.html#add_colorbar', 'rl_optimal_search/utils.py')}}}
