# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/lib_nbs/launch_files/launch_robots_v1.ipynb.

# %% auto 0
__all__ = ['TIME_EP', 'EPISODES', 'N_AGENTS', 'Nt', 'L', 'r', 'tau', 'agent_radius', 'avg_vel', 'std_vel', 'avg_turn_angle',
           'std_turn_angle', 'size_state_space', 'initial_prob_distr', 'gamma_damping_list', 'eta_glow_damping_list']

# %% ../nbs/lib_nbs/launch_files/launch_robots_v1.ipynb 3
import numba
import numpy as np
from .robot_search import RobotSearch, run_robot_training_parallel
from numba import set_num_threads 
from tqdm import tqdm
import pathlib
import os
numba.get_num_threads()
import matplotlib.pyplot as plt

# %% ../nbs/lib_nbs/launch_files/launch_robots_v1.ipynb 13
# Training spec
TIME_EP = 5000
EPISODES = 1200
N_AGENTS = 100

# Environment 
Nt = 92; L = 96; r = 1; tau = 4; agent_radius = 1.5; avg_vel = 0.96; std_vel = 0.1; avg_turn_angle = 0.44; std_turn_angle = 0.04;


# Agent (we restrict the size of the h matrix to a maximum counter value of TIME_EP)
size_state_space = np.array([TIME_EP], dtype=np.int64)
initial_prob_distr = (np.array([0.988, 0.012/2, 0.012/2])*np.ones((3, TIME_EP)).transpose()).transpose()

# Grid of learning hyperparameters
gamma_damping_list = np.hstack((np.linspace(0.000001, 0.00001, 5),np.linspace(0.00001, 0.0001, 5)[1:]))
eta_glow_damping_list = np.array([0.0001,0.001,0.01, 0.04, 0.08, 0.1, 0.2, 0.3])

# %% ../nbs/lib_nbs/launch_files/launch_robots_v1.ipynb 73
import numba
import numpy as np
from .robot_search import parallel_robots_trajectories
